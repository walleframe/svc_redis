// Code generated by "gogen cfggen"; DO NOT EDIT.
// Exec: gogen cfggen -n Config -o gen_configs.go Version: 0.0.1
package rediscfg

import (
	"time"

	"github.com/walleframe/walle/services/configcentra"
)

var _ = generateRedisConfig()

// Config config generate by gogen cfggen.
type Config struct {
	Name string
	// redis addrs
	Addrs []string
	// db index
	DB int
	// user name
	Username string
	// password
	Password           string
	MaxRetries         int
	MinRetryBackoff    time.Duration
	MaxRetryBackoff    time.Duration
	ConnDialTimeout    time.Duration
	SocketReadTimeout  time.Duration
	SocketWriteTimeout time.Duration
	// context time enable
	ContextTimeoutEnabled bool
	// pool fifo, lifo default
	PoolFIFO bool
	// connection pool size
	ConnPoolSize int
	// pool timeout
	PoolTimeout time.Duration
	// min idel count
	MinIdleConns int
	// max idle conn count
	MaxIdleConns int
	// max active connection count
	MaxActiveConns int
	// max idel time
	ConnMaxIdleTime time.Duration
	// max life time
	ConnMaxLifetime  time.Duration
	DisableIndentity bool
	// sentinel username
	SentinelUsername string
	// sentinel password
	SentinelPassword string
	// sentinel master name
	SentinelMasterName string
	// enable cluster mode
	Cluster bool
	// cluster read only
	ClusterReadOnly bool
	// cluster route random
	ClusterRouteRandomly bool
	// cluster route by latency
	ClusterRouteByLatency bool
	// config prefix string
	prefix string
	// update ntf funcs
	ntfFuncs []func(*Config)
}

var _ configcentra.ConfigValue = (*Config)(nil)

func NewConfig(prefix string) *Config {
	// new default config value
	cfg := NewDefaultConfig(prefix)
	// register value to config centra
	configcentra.RegisterConfig(cfg)
	return cfg
}

func NewDefaultConfig(prefix string) *Config {
	cfg := &Config{
		Name:                  "",
		Addrs:                 []string{"127.0.0.1:6379"},
		DB:                    0,
		Username:              "",
		Password:              "",
		MaxRetries:            0,
		MinRetryBackoff:       0,
		MaxRetryBackoff:       0,
		ConnDialTimeout:       time.Second * 5,
		SocketReadTimeout:     time.Second * 3,
		SocketWriteTimeout:    time.Second * 3,
		ContextTimeoutEnabled: false,
		PoolFIFO:              false,
		ConnPoolSize:          0,
		PoolTimeout:           0,
		MinIdleConns:          0,
		MaxIdleConns:          0,
		MaxActiveConns:        0,
		ConnMaxIdleTime:       0,
		ConnMaxLifetime:       0,
		DisableIndentity:      false,
		SentinelUsername:      "",
		SentinelPassword:      "",
		SentinelMasterName:    "",
		Cluster:               false,
		ClusterReadOnly:       false,
		ClusterRouteRandomly:  false,
		ClusterRouteByLatency: false,
		prefix:                prefix,
	}
	return cfg
}

// add notify func
func (cfg *Config) AddNotifyFunc(f func(*Config)) {
	cfg.ntfFuncs = append(cfg.ntfFuncs, f)
}

// impl configcentra.ConfigValue
func (cfg *Config) SetDefaultValue(cc configcentra.ConfigCentra) {
	if cfg.prefix == "" {
		cc.SetDefault("name", "", cfg.Name)
		cc.SetDefault("addrs", "redis addrs", cfg.Addrs)
		cc.SetDefault("db", "db index", cfg.DB)
		cc.SetDefault("username", "user name", cfg.Username)
		cc.SetDefault("password", "password", cfg.Password)
		cc.SetDefault("maxretries", "", cfg.MaxRetries)
		cc.SetDefault("minretrybackoff", "", cfg.MinRetryBackoff)
		cc.SetDefault("maxretrybackoff", "", cfg.MaxRetryBackoff)
		cc.SetDefault("conndialtimeout", "", cfg.ConnDialTimeout)
		cc.SetDefault("socketreadtimeout", "", cfg.SocketReadTimeout)
		cc.SetDefault("socketwritetimeout", "", cfg.SocketWriteTimeout)
		cc.SetDefault("contexttimeoutenabled", "context time enable", cfg.ContextTimeoutEnabled)
		cc.SetDefault("poolfifo", "pool fifo, lifo default", cfg.PoolFIFO)
		cc.SetDefault("connpoolsize", "connection pool size", cfg.ConnPoolSize)
		cc.SetDefault("pooltimeout", "pool timeout", cfg.PoolTimeout)
		cc.SetDefault("minidleconns", "min idel count", cfg.MinIdleConns)
		cc.SetDefault("maxidleconns", "max idle conn count", cfg.MaxIdleConns)
		cc.SetDefault("maxactiveconns", "max active connection count", cfg.MaxActiveConns)
		cc.SetDefault("connmaxidletime", "max idel time", cfg.ConnMaxIdleTime)
		cc.SetDefault("connmaxlifetime", "max life time", cfg.ConnMaxLifetime)
		cc.SetDefault("disableindentity", "", cfg.DisableIndentity)
		cc.SetDefault("sentinelusername", "sentinel username", cfg.SentinelUsername)
		cc.SetDefault("sentinelpassword", "sentinel password", cfg.SentinelPassword)
		cc.SetDefault("sentinelmastername", "sentinel master name", cfg.SentinelMasterName)
		cc.SetDefault("cluster", "enable cluster mode", cfg.Cluster)
		cc.SetDefault("clusterreadonly", "cluster read only", cfg.ClusterReadOnly)
		cc.SetDefault("clusterrouterandomly", "cluster route random", cfg.ClusterRouteRandomly)
		cc.SetDefault("clusterroutebylatency", "cluster route by latency", cfg.ClusterRouteByLatency)
	} else {
		cc.SetDefault(cfg.prefix+".name", "", cfg.Name)
		cc.SetDefault(cfg.prefix+".addrs", "redis addrs", cfg.Addrs)
		cc.SetDefault(cfg.prefix+".db", "db index", cfg.DB)
		cc.SetDefault(cfg.prefix+".username", "user name", cfg.Username)
		cc.SetDefault(cfg.prefix+".password", "password", cfg.Password)
		cc.SetDefault(cfg.prefix+".maxretries", "", cfg.MaxRetries)
		cc.SetDefault(cfg.prefix+".minretrybackoff", "", cfg.MinRetryBackoff)
		cc.SetDefault(cfg.prefix+".maxretrybackoff", "", cfg.MaxRetryBackoff)
		cc.SetDefault(cfg.prefix+".conndialtimeout", "", cfg.ConnDialTimeout)
		cc.SetDefault(cfg.prefix+".socketreadtimeout", "", cfg.SocketReadTimeout)
		cc.SetDefault(cfg.prefix+".socketwritetimeout", "", cfg.SocketWriteTimeout)
		cc.SetDefault(cfg.prefix+".contexttimeoutenabled", "context time enable", cfg.ContextTimeoutEnabled)
		cc.SetDefault(cfg.prefix+".poolfifo", "pool fifo, lifo default", cfg.PoolFIFO)
		cc.SetDefault(cfg.prefix+".connpoolsize", "connection pool size", cfg.ConnPoolSize)
		cc.SetDefault(cfg.prefix+".pooltimeout", "pool timeout", cfg.PoolTimeout)
		cc.SetDefault(cfg.prefix+".minidleconns", "min idel count", cfg.MinIdleConns)
		cc.SetDefault(cfg.prefix+".maxidleconns", "max idle conn count", cfg.MaxIdleConns)
		cc.SetDefault(cfg.prefix+".maxactiveconns", "max active connection count", cfg.MaxActiveConns)
		cc.SetDefault(cfg.prefix+".connmaxidletime", "max idel time", cfg.ConnMaxIdleTime)
		cc.SetDefault(cfg.prefix+".connmaxlifetime", "max life time", cfg.ConnMaxLifetime)
		cc.SetDefault(cfg.prefix+".disableindentity", "", cfg.DisableIndentity)
		cc.SetDefault(cfg.prefix+".sentinelusername", "sentinel username", cfg.SentinelUsername)
		cc.SetDefault(cfg.prefix+".sentinelpassword", "sentinel password", cfg.SentinelPassword)
		cc.SetDefault(cfg.prefix+".sentinelmastername", "sentinel master name", cfg.SentinelMasterName)
		cc.SetDefault(cfg.prefix+".cluster", "enable cluster mode", cfg.Cluster)
		cc.SetDefault(cfg.prefix+".clusterreadonly", "cluster read only", cfg.ClusterReadOnly)
		cc.SetDefault(cfg.prefix+".clusterrouterandomly", "cluster route random", cfg.ClusterRouteRandomly)
		cc.SetDefault(cfg.prefix+".clusterroutebylatency", "cluster route by latency", cfg.ClusterRouteByLatency)
	}
}

// impl configcentra.ConfigValue
func (cfg *Config) RefreshValue(cc configcentra.ConfigCentra) {
	if cfg.prefix == "" {
		cfg.Name = (string)(cc.GetString("name"))
		cfg.Addrs = ([]string)(cc.GetStringSlice("addrs"))
		cfg.DB = (int)(cc.GetInt("db"))
		cfg.Username = (string)(cc.GetString("username"))
		cfg.Password = (string)(cc.GetString("password"))
		cfg.MaxRetries = (int)(cc.GetInt("maxretries"))
		cfg.MinRetryBackoff = (time.Duration)(cc.GetDuration("minretrybackoff"))
		cfg.MaxRetryBackoff = (time.Duration)(cc.GetDuration("maxretrybackoff"))
		cfg.ConnDialTimeout = (time.Duration)(cc.GetDuration("conndialtimeout"))
		cfg.SocketReadTimeout = (time.Duration)(cc.GetDuration("socketreadtimeout"))
		cfg.SocketWriteTimeout = (time.Duration)(cc.GetDuration("socketwritetimeout"))
		cfg.ContextTimeoutEnabled = (bool)(cc.GetBool("contexttimeoutenabled"))
		cfg.PoolFIFO = (bool)(cc.GetBool("poolfifo"))
		cfg.ConnPoolSize = (int)(cc.GetInt("connpoolsize"))
		cfg.PoolTimeout = (time.Duration)(cc.GetDuration("pooltimeout"))
		cfg.MinIdleConns = (int)(cc.GetInt("minidleconns"))
		cfg.MaxIdleConns = (int)(cc.GetInt("maxidleconns"))
		cfg.MaxActiveConns = (int)(cc.GetInt("maxactiveconns"))
		cfg.ConnMaxIdleTime = (time.Duration)(cc.GetDuration("connmaxidletime"))
		cfg.ConnMaxLifetime = (time.Duration)(cc.GetDuration("connmaxlifetime"))
		cfg.DisableIndentity = (bool)(cc.GetBool("disableindentity"))
		cfg.SentinelUsername = (string)(cc.GetString("sentinelusername"))
		cfg.SentinelPassword = (string)(cc.GetString("sentinelpassword"))
		cfg.SentinelMasterName = (string)(cc.GetString("sentinelmastername"))
		cfg.Cluster = (bool)(cc.GetBool("cluster"))
		cfg.ClusterReadOnly = (bool)(cc.GetBool("clusterreadonly"))
		cfg.ClusterRouteRandomly = (bool)(cc.GetBool("clusterrouterandomly"))
		cfg.ClusterRouteByLatency = (bool)(cc.GetBool("clusterroutebylatency"))
	} else {
		cfg.Name = (string)(cc.GetString(cfg.prefix + ".name"))
		cfg.Addrs = ([]string)(cc.GetStringSlice(cfg.prefix + ".addrs"))
		cfg.DB = (int)(cc.GetInt(cfg.prefix + ".db"))
		cfg.Username = (string)(cc.GetString(cfg.prefix + ".username"))
		cfg.Password = (string)(cc.GetString(cfg.prefix + ".password"))
		cfg.MaxRetries = (int)(cc.GetInt(cfg.prefix + ".maxretries"))
		cfg.MinRetryBackoff = (time.Duration)(cc.GetDuration(cfg.prefix + ".minretrybackoff"))
		cfg.MaxRetryBackoff = (time.Duration)(cc.GetDuration(cfg.prefix + ".maxretrybackoff"))
		cfg.ConnDialTimeout = (time.Duration)(cc.GetDuration(cfg.prefix + ".conndialtimeout"))
		cfg.SocketReadTimeout = (time.Duration)(cc.GetDuration(cfg.prefix + ".socketreadtimeout"))
		cfg.SocketWriteTimeout = (time.Duration)(cc.GetDuration(cfg.prefix + ".socketwritetimeout"))
		cfg.ContextTimeoutEnabled = (bool)(cc.GetBool(cfg.prefix + ".contexttimeoutenabled"))
		cfg.PoolFIFO = (bool)(cc.GetBool(cfg.prefix + ".poolfifo"))
		cfg.ConnPoolSize = (int)(cc.GetInt(cfg.prefix + ".connpoolsize"))
		cfg.PoolTimeout = (time.Duration)(cc.GetDuration(cfg.prefix + ".pooltimeout"))
		cfg.MinIdleConns = (int)(cc.GetInt(cfg.prefix + ".minidleconns"))
		cfg.MaxIdleConns = (int)(cc.GetInt(cfg.prefix + ".maxidleconns"))
		cfg.MaxActiveConns = (int)(cc.GetInt(cfg.prefix + ".maxactiveconns"))
		cfg.ConnMaxIdleTime = (time.Duration)(cc.GetDuration(cfg.prefix + ".connmaxidletime"))
		cfg.ConnMaxLifetime = (time.Duration)(cc.GetDuration(cfg.prefix + ".connmaxlifetime"))
		cfg.DisableIndentity = (bool)(cc.GetBool(cfg.prefix + ".disableindentity"))
		cfg.SentinelUsername = (string)(cc.GetString(cfg.prefix + ".sentinelusername"))
		cfg.SentinelPassword = (string)(cc.GetString(cfg.prefix + ".sentinelpassword"))
		cfg.SentinelMasterName = (string)(cc.GetString(cfg.prefix + ".sentinelmastername"))
		cfg.Cluster = (bool)(cc.GetBool(cfg.prefix + ".cluster"))
		cfg.ClusterReadOnly = (bool)(cc.GetBool(cfg.prefix + ".clusterreadonly"))
		cfg.ClusterRouteRandomly = (bool)(cc.GetBool(cfg.prefix + ".clusterrouterandomly"))
		cfg.ClusterRouteByLatency = (bool)(cc.GetBool(cfg.prefix + ".clusterroutebylatency"))
	}
	// notify update
	for _, ntf := range cfg.ntfFuncs {
		ntf(cfg)
	}
}
