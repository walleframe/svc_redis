// Code generated by protoc-gen-gopb. DO NOT EDIT.
// Code generated by wpb. DO NOT EDIT.

package rds

import (
	"errors"

	"github.com/walleframe/svc_redis/example/server"
	"github.com/walleframe/walle/util/protowire"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

type TestProtocolDef struct {
	F2 *server.Player `json:"f2,omitempty"`
	F4 int64          `json:"f4,omitempty"`
	F5 *X1            `json:"f5,omitempty"`
}

func (x *TestProtocolDef) Reset() {
	*x = TestProtocolDef{}
}

// MarshalObject marshal data to []byte
func (x *TestProtocolDef) MarshalObject() (data []byte, err error) {
	data = make([]byte, 0, x.MarshalSize())
	return x.MarshalObjectTo(data)
}

// MarshalSize calc marshal data need space
func (x *TestProtocolDef) MarshalSize() (size int) {
	if x.F2 != nil {
		// 1 = protowire.SizeTag(2)
		size += 1 + protowire.SizeBytes(x.F2.MarshalSize())
	}
	if x.F4 != 0 {
		// 1 = protowire.SizeTag(4)
		size += 1 + protowire.SizeVarint(uint64(x.F4))
	}
	if x.F5 != nil {
		// 1 = protowire.SizeTag(5)
		size += 1 + protowire.SizeBytes(x.F5.MarshalSize())
	}
	return
}

// MarshalObjectTo marshal data to []byte
func (x *TestProtocolDef) MarshalObjectTo(buf []byte) (data []byte, err error) {
	data = buf
	if x.F2 != nil {
		// data = protowire.AppendTag(data, 2, protowire.BytesType) => 00010010
		data = append(data, 0x12)
		data = protowire.AppendVarint(data, uint64(x.F2.MarshalSize()))
		data, err = x.F2.MarshalObjectTo(data)
		if err != nil {
			return
		}
	}
	if x.F4 != 0 {
		// data = protowire.AppendTag(data, 4, protowire.VarintType) => 00100000
		data = append(data, 0x20)
		data = protowire.AppendVarint(data, uint64(x.F4))
	}
	if x.F5 != nil {
		// data = protowire.AppendTag(data, 5, protowire.BytesType) => 00101010
		data = append(data, 0x2a)
		data = protowire.AppendVarint(data, uint64(x.F5.MarshalSize()))
		data, err = x.F5.MarshalObjectTo(data)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalObject unmarshal data from []byte
func (x *TestProtocolDef) UnmarshalObject(data []byte) (err error) {
	index := 0
	for index < len(data) {
		num, typ, cnt := protowire.ConsumeTag(data[index:])
		if num == 0 {
			err = errors.New("invalid tag")
			return
		}

		index += cnt
		switch num {
		case 2:
			v, cnt := protowire.ConsumeBytes(data[index:])
			if v == nil {
				err = errors.New("parse TestProtocolDef.F2 ID:2 : invalid message value")
				return
			}
			index += cnt
			x.F2 = &server.Player{}
			err = x.F2.UnmarshalObject(v)
			if err != nil {
				return
			}
		case 4:
			v, cnt := protowire.ConsumeVarint(data[index:])
			if cnt < 1 {
				err = errors.New("parse TestProtocolDef.F4 ID:4 : invalid varint value")
				return
			}
			index += cnt
			x.F4 = int64(v)
		case 5:
			v, cnt := protowire.ConsumeBytes(data[index:])
			if v == nil {
				err = errors.New("parse TestProtocolDef.F5 ID:5 : invalid message value")
				return
			}
			index += cnt
			x.F5 = &X1{}
			err = x.F5.UnmarshalObject(v)
			if err != nil {
				return
			}
		default: // skip fields
			cnt = protowire.ConsumeFieldValue(num, typ, data[index:])
			if cnt < 0 {
				return protowire.ParseError(cnt)
			}
			index += cnt
		}
	}

	return
}

func (x *TestProtocolDef) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	enc.AddObject("F2", x.F2)
	enc.AddInt64("F4", x.F4)
	enc.AddObject("F5", x.F5)
	return nil
}

type ZapArrayTestProtocolDef []*TestProtocolDef

func (x ZapArrayTestProtocolDef) MarshalLogArray(ae zapcore.ArrayEncoder) error {
	for _, v := range x {
		ae.AppendObject(v)
	}
	return nil
}

func LogArrayTestProtocolDef(name string, v []*TestProtocolDef) zap.Field {
	return zap.Array(name, ZapArrayTestProtocolDef(v))
}

type X1 struct {
	F1 int32          `json:"f1,omitempty"`
	F2 *server.Player `json:"f2,omitempty"`
	F4 int64          `json:"f4,omitempty"`
}

func (x *X1) Reset() {
	*x = X1{}
}

// MarshalObject marshal data to []byte
func (x *X1) MarshalObject() (data []byte, err error) {
	data = make([]byte, 0, x.MarshalSize())
	return x.MarshalObjectTo(data)
}

// MarshalSize calc marshal data need space
func (x *X1) MarshalSize() (size int) {
	if x.F1 != 0 {
		// 1 = protowire.SizeTag(1)
		size += 1 + protowire.SizeVarint(uint64(x.F1))
	}
	if x.F2 != nil {
		// 1 = protowire.SizeTag(2)
		size += 1 + protowire.SizeBytes(x.F2.MarshalSize())
	}
	if x.F4 != 0 {
		// 1 = protowire.SizeTag(4)
		size += 1 + protowire.SizeVarint(uint64(x.F4))
	}
	return
}

// MarshalObjectTo marshal data to []byte
func (x *X1) MarshalObjectTo(buf []byte) (data []byte, err error) {
	data = buf
	if x.F1 != 0 {
		// data = protowire.AppendTag(data, 1, protowire.VarintType) => 00001000
		data = append(data, 0x8)
		data = protowire.AppendVarint(data, uint64(x.F1))
	}
	if x.F2 != nil {
		// data = protowire.AppendTag(data, 2, protowire.BytesType) => 00010010
		data = append(data, 0x12)
		data = protowire.AppendVarint(data, uint64(x.F2.MarshalSize()))
		data, err = x.F2.MarshalObjectTo(data)
		if err != nil {
			return
		}
	}
	if x.F4 != 0 {
		// data = protowire.AppendTag(data, 4, protowire.VarintType) => 00100000
		data = append(data, 0x20)
		data = protowire.AppendVarint(data, uint64(x.F4))
	}
	return
}

// UnmarshalObject unmarshal data from []byte
func (x *X1) UnmarshalObject(data []byte) (err error) {
	index := 0
	for index < len(data) {
		num, typ, cnt := protowire.ConsumeTag(data[index:])
		if num == 0 {
			err = errors.New("invalid tag")
			return
		}

		index += cnt
		switch num {
		case 1:
			v, cnt := protowire.ConsumeVarint(data[index:])
			if cnt < 1 {
				err = errors.New("parse X1.F1 ID:1 : invalid varint value")
				return
			}
			index += cnt
			x.F1 = int32(v)
		case 2:
			v, cnt := protowire.ConsumeBytes(data[index:])
			if v == nil {
				err = errors.New("parse X1.F2 ID:2 : invalid message value")
				return
			}
			index += cnt
			x.F2 = &server.Player{}
			err = x.F2.UnmarshalObject(v)
			if err != nil {
				return
			}
		case 4:
			v, cnt := protowire.ConsumeVarint(data[index:])
			if cnt < 1 {
				err = errors.New("parse X1.F4 ID:4 : invalid varint value")
				return
			}
			index += cnt
			x.F4 = int64(v)
		default: // skip fields
			cnt = protowire.ConsumeFieldValue(num, typ, data[index:])
			if cnt < 0 {
				return protowire.ParseError(cnt)
			}
			index += cnt
		}
	}

	return
}

func (x *X1) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	enc.AddInt32("F1", x.F1)
	enc.AddObject("F2", x.F2)
	enc.AddInt64("F4", x.F4)
	return nil
}

type ZapArrayX1 []*X1

func (x ZapArrayX1) MarshalLogArray(ae zapcore.ArrayEncoder) error {
	for _, v := range x {
		ae.AppendObject(v)
	}
	return nil
}

func LogArrayX1(name string, v []*X1) zap.Field {
	return zap.Array(name, ZapArrayX1(v))
}
